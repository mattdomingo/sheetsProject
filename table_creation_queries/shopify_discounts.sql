CREATE OR REPLACE TABLE `sheets_base_schema.shopify_discounts` (
  `discount_code_id` INT64 OPTIONS(description = 'The ID for the discount code.'),
  `code` STRING OPTIONS(description = 'The case-insensitive discount code that customers use at checkout. Shopify recommends this map onto the associated `price_rule.title`.'),
  `price_rule_id` INT64 OPTIONS(description = 'The ID for the price rule.'),
  `usage_count` FLOAT64 OPTIONS(description = 'The number of times that the discount code has been redeemed.'),
  `created_at` TIMESTAMP OPTIONS(description = 'The date and time (ISO 8601 format) when the discount code was created.'),
  `updated_at` TIMESTAMP OPTIONS(description = 'The date and time (ISO 8601 format) when the discount code was updated.'),
  `_fivetran_synced` TIMESTAMP OPTIONS(description = 'The time when a record was last updated by Fivetran.'),
  `source_relation` STRING OPTIONS(description = 'The schema or database this record came from if you are making use of the `shopify_union_schemas` or `shopify_union_databases` variables, respectively. Empty string if you are not using either of these variables to union together multiple Shopify connectors.'),
  `discounts_unique_key` STRING OPTIONS(description = 'Unique key representing a discount. Hashed on \'discount_code_id\' and \'source_relation\'.'),
  `target_selection` STRING OPTIONS(description = 'The target selection method of the price rule. Valid values include `all` (the price rule applies the discount to all line items in the checkout) and `entitled` (the price rule applies the discount to selected entitlements only).'),
  `target_type` STRING OPTIONS(description = 'The target type that the price rule applies to. Valid values include `line_item` (the price rule applies to the cart\'s line items) and `shipping_line` (the price rule applies to the cart\'s shipping lines).'),
  `title` STRING OPTIONS(description = 'The title of the price rule. This is used by the Shopify admin search to retrieve discounts. It is also displayed on the Discounts page of the Shopify admin for bulk discounts. Shopify recommends that this map onto the associated `discount_code.code`.'),
  `usage_limit` INT64 OPTIONS(description = 'The maximum number of times the price rule can be used, per discount code.'),
  `value` FLOAT64 OPTIONS(description = 'The value of the price rule. If if the value of `target_type` is `shipping_line`, then only -100 is accepted. The value must be negative.'),
  `value_type` STRING OPTIONS(description = 'The value type of the price rule. Valid values include `fixed_amount` (applies a discount of value as a unit of the store\'s currency. For example, if value is -30 and the store\'s currency is USD, then $30 USD is deducted when the discount is applied) and `percentage` (applies a percentage discount of value. For example, if value is -30, then 30% will be deducted when the discount is applied). If `target_type` is `shipping_line`, then only `percentage` is accepted.'),
  `allocation_limit` INT64 OPTIONS(description = 'The number of times the discount can be allocated on the cart - if eligible. For example a Buy 1 hat Get 1 hat for free discount can be applied 3 times on a cart having more than 6 hats, where maximum of 3 hats get discounted - if the allocation_limit is 3. Empty (null) allocation_limit means unlimited number of allocations.'),
  `allocation_method` STRING OPTIONS(description = 'The allocation method of the price rule. Valid values include `each` (the discount is applied to each of the entitled items. For example, for a price rule that takes $15 off, each entitled line item in a checkout will be discounted by $15) and `across` (the calculated discount amount will be applied across the entitled items).'),
  `is_once_per_customer` BOOL OPTIONS(description = 'Boolean representing whether the generated discount code will be valid only for a single use per customer. This is tracked using customer ID.'),
  `customer_selection` STRING OPTIONS(description = 'The customer selection for the price rule. Valid values include `all` (the price rule is valid for all customers) and `prerequisite` (the customer must either belong to one of the customer segments specified by customer_segment_prerequisite_ids, or be one of the customers specified by prerequisite_customer_ids).'),
  `prereq_min_quantity` FLOAT64 OPTIONS(description = 'If `customer_selection` is `prerequisite`, the minimum number of items for the price rule to be applicable. The quantity of an entitled cart item must be greater than or equal to this value.'),
  `prereq_max_shipping_price` FLOAT64 OPTIONS(description = 'If `customer_selection` is `prerequisite`, the maximum shipping price for the price rule to be applicable. The shipping price must be less than or equal to this value'),
  `prereq_min_subtotal` FLOAT64 OPTIONS(description = 'If `customer_selection` is `prerequisite`, the minimum subtotal for the price rule to be applicable. The subtotal of the entitled cart items must be greater than or equal to this value for the discount to apply.'),
  `prereq_min_purchase_quantity_for_entitlement` FLOAT64 OPTIONS(description = 'If `customer_selection` is `prerequisite`, the prerequisite purchase for a Buy X Get Y discount. The minimum purchase amount required to be entitled to the discount.'),
  `prereq_buy_x_get_this` FLOAT64 OPTIONS(description = 'If `customer_selection` is `prerequisite`, in a Buy/Get ratio for a Buy X Get Y discount, this is the offered \'get\' quantity.'),
  `prereq_buy_this_get_y` FLOAT64 OPTIONS(description = 'If `customer_selection` is `prerequisite`, in a Buy/Get ratio for a Buy X Get Y discount, this defines the necessary \'buy\' quantity.'),
  `starts_at` TIMESTAMP OPTIONS(description = 'The date and time (ISO 8601 format) when the price rule starts.'),
  `ends_at` TIMESTAMP OPTIONS(description = 'The date and time (ISO 8601 format) when the price rule ends. Must be after starts_at.'),
  `price_rule_created_at` TIMESTAMP OPTIONS(description = 'The date and time (ISO 8601 format) when the price rule was created.'),
  `price_rule_updated_at` TIMESTAMP OPTIONS(description = 'The date and time (ISO 8601 format) when the price rule was updated.'),
  `count_orders` INT64 OPTIONS(description = 'Count of orders in which this discount code was applied.'),
  `avg_order_discount_amount` FLOAT64 OPTIONS(description = 'Average amount (in shop currency) of discount taken off orders.'),
  `total_order_discount_amount` FLOAT64 OPTIONS(description = 'Total monetary amount (in shop currency) of discounts taken off of orders.'),
  `total_order_line_items_price` FLOAT64 OPTIONS(description = 'Total monetary amount (in shop currency) of line items for orders that have used this discount.'),
  `total_order_shipping_cost` FLOAT64 OPTIONS(description = 'Total shipping costs for orders that used this discount.'),
  `total_order_refund_amount` FLOAT64 OPTIONS(description = 'Total refunded amount (in shop currency) for orders that used this discount code.'),
  `count_customers` INT64 OPTIONS(description = 'Count of distinct customers who placed orders using this discount.'),
  `count_customer_emails` INT64 OPTIONS(description = 'Count of distinct customer emails who placed orders using this discount.'),
  `total_abandoned_checkout_discount_amount` FLOAT64 OPTIONS(description = 'Total monetary amount (in shop currency) of discounts taken off abandoned checkout orders.'),
  `total_abandoned_checkout_shipping_price` FLOAT64 OPTIONS(description = 'Total projected shipping costs for abandoned checkouts that applied this discount first.'),
  `count_abandoned_checkouts` INT64 OPTIONS(description = 'Count of abandoned checkouts in which this discount code was applied.'),
  `count_abandoned_checkout_customers` INT64 OPTIONS(description = 'Distinct count of customers who applied this discount in a checkout that they abandoned.'),
  `count_abandoned_checkout_customer_emails` INT64 OPTIONS(description = 'Distinct count of customer emails who applied this discount in a checkout that they abandoned.')
)
OPTIONS (description = 'This table contains discount code information from Shopify.');
